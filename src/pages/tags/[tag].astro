---
import { getCollection } from "astro:content";
import Layout from "../../layouts/MainLayout.astro";
import TagList from "../../components/TagList.astro";
import { getThumbnailUrl } from "../../utils/video-utils";

export const prerender = true;

export async function getStaticPaths() {
  const talks = await getCollection("talks");
  const blog = await getCollection("blog");
  const filteredBlog = blog.filter((post) => !post.data.draft);

  const allTags = new Set<string>();
  const tagToOriginalCase = new Map<string, string>();

  // Process talks
  talks.forEach((talk) => {
    talk.data.tags?.forEach((tag) => {
      const normalizedTag = tag.toLowerCase().replace(/\s+/g, "");
      allTags.add(normalizedTag);
      tagToOriginalCase.set(normalizedTag, tag);
    });
  });

  // Process blog posts
  filteredBlog.forEach((post) => {
    post.data.tags?.forEach((tag) => {
      const normalizedTag = tag.toLowerCase().replace(/\s+/g, "");
      allTags.add(normalizedTag);
      tagToOriginalCase.set(normalizedTag, tag);
    });
  });

  // Create a path for each tag
  return Array.from(allTags).map((normalizedTag) => {
    const taggedTalks = talks.filter(
      (talk) =>
        talk.data.tags &&
        talk.data.tags.some(
          (tag) => tag.toLowerCase().replace(/\s+/g, "") === normalizedTag,
        ),
    );

    const taggedPosts = filteredBlog.filter(
      (post) =>
        post.data.tags &&
        post.data.tags.some(
          (tag) => tag.toLowerCase().replace(/\s+/g, "") === normalizedTag,
        ),
    );

    return {
      params: { tag: normalizedTag },
      props: {
        talks: taggedTalks,
        posts: taggedPosts,
        originalTagCase: tagToOriginalCase.get(normalizedTag) || normalizedTag,
      },
    };
  });
}

const { tag } = Astro.params;
const { talks, posts, originalTagCase } = Astro.props;

// Sort talks by date (newest first)
const sortedTalks =
  talks && talks.length
    ? talks.sort((a, b) => b.data.date.getTime() - a.data.date.getTime())
    : [];

// Sort posts by date (newest first)
const sortedPosts =
  posts && posts.length
    ? posts.sort((a, b) => b.data.date.getTime() - a.data.date.getTime())
    : [];

const displayTag = originalTagCase || tag;
const totalItems = sortedTalks.length + sortedPosts.length;
---

<Layout title={`Content tagged with "${tag}" | Nick Taylor`}>
  <main class="mt-4 md:mt-8 lg:mt-16 grid gap-8">
    <header class="grid gap-8">
      <h1>Content tagged with "{displayTag}"</h1>
      <a href="/tags">View all tags</a>
      <p class="text-gray-600">
        Found {totalItems} items with this tag ({sortedTalks.length} talks, {
          sortedPosts.length
        } blog posts)
      </p>
    </header>

    {
      sortedPosts.length > 0 && (
        <section>
          <h2 class="text-2xl font-bold mb-6">Blog Posts</h2>
          <ul class="grid gap-8">
            {sortedPosts.map((post) => {
              const slug = post.id.replace(/^blog\//, "").replace(/\.md$/, "");
              return (
                <li>
                  <a href={`/blog/${slug}`} class="block group">
                    <article class="flex gap-4">
                      {post.data.image && (
                        <div class="hidden md:block flex-shrink-0 w-48 h-27">
                          <img
                            src={post.data.image.url}
                            alt={post.data.image.alt || ""}
                            aria-hidden="true"
                            class="w-full h-full object-cover rounded"
                            loading="lazy"
                          />
                        </div>
                      )}
                      <div>
                        <h3>
                          <a href={`/blog/${slug}`}>{post.data.title}</a>
                        </h3>
                        {post.data.description && (
                          <p class="mt-2 text-gray-600">
                            {post.data.description}
                          </p>
                        )}
                        <div>
                          <time datetime={post.data.date.toISOString()}>
                            {post.data.date.toLocaleDateString("en-US", {
                              year: "numeric",
                              month: "long",
                              day: "numeric",
                            })}
                          </time>
                          {post.data.featured && (
                            <>
                              {" \u2022 "}
                              <span class="text-pink-600 font-medium">
                                Featured
                              </span>
                            </>
                          )}
                        </div>
                        <div class="mt-2">
                          <TagList
                            tags={post.data.tags || []}
                            currentTag={tag}
                            limit={5}
                          />
                        </div>
                      </div>
                    </article>
                  </a>
                </li>
              );
            })}
          </ul>
        </section>
      )
    }

    {
      sortedTalks.length > 0 && (
        <section>
          <h2 class="text-2xl font-bold mb-6">Talks</h2>
          <ul class="grid gap-8">
            {sortedTalks.map((talk) => {
              const slug = talk.id.replace(/^talks\//, "").replace(/\.md$/, "");
              const thumbnailUrl = getThumbnailUrl(talk);
              return (
                <li>
                  <a href={`/talks/${slug}`} class="block group">
                    <article class="flex gap-4">
                      <div class="hidden md:block flex-shrink-0 w-48 h-27">
                        <img
                          src={thumbnailUrl}
                          alt=""
                          aria-hidden="true"
                          class="w-full h-full object-cover rounded"
                          loading="lazy"
                        />
                      </div>
                      <div>
                        <h3>
                          <a href={`/talks/${slug}`}>{talk.data.title}</a>
                        </h3>
                        <div>
                          <time datetime={talk.data.date.toISOString()}>
                            {talk.data.date.toLocaleDateString("en-US", {
                              year: "numeric",
                              month: "long",
                              day: "numeric",
                            })}
                          </time>
                          {" \u2022 "}
                          {talk.data.venue.name}
                        </div>
                        <div class="mt-2">
                          <TagList
                            tags={talk.data.tags || []}
                            currentTag={tag}
                            limit={5}
                          />
                        </div>
                      </div>
                    </article>
                  </a>
                </li>
              );
            })}
          </ul>
        </section>
      )
    }

    {
      totalItems === 0 && (
        <p class="text-gray-600">No content found with this tag.</p>
      )
    }
    <a href="/tags">View all tags</a>
  </main>
</Layout>
