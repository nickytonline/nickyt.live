---
import GitHubLink from "../../components/GitHubLink.astro";
import StreamLinks from "../../components/StreamLinks.astro";
import type { StreamGuestInfo } from "../../components/StreamSchedule.astro";
import TwitchLink from "../../components/TwitchLink.astro";
import TwitterLink from "../../components/TwitterLink.astro";
import WebsiteLink from "../../components/WebsiteLink.astro";
import YouTubeLink from "../../components/YouTubeLink.astro";
import MainLayout from "../../layouts/MainLayout.astro";
import { getStreamSchedule } from "../../utils/schedule-utils";
import { getYouTubeId } from "../../utils/youtube-utils";

interface Props extends StreamGuestInfo {
  date: string;
  streamTitle: string;
  streamDescription: string;
  youtubeStreamLink: string;
  linkedinStreamLink: string;
  name: string;
  title: string;
  twitter: string;
  website: string;
  twitch: string;
  youtube: string;
  github: string;
}

export const prerender = true;

export async function getStaticPaths() {
  const { AIRTABLE_STREAM_GUEST_BASE_ID, AIRTABLE_API_KEY } = import.meta.env;

  if (!AIRTABLE_API_KEY || !AIRTABLE_STREAM_GUEST_BASE_ID) {
    throw new Error("Missing required environment variables");
  }

  const schedule = await getStreamSchedule({
    apiKey: AIRTABLE_API_KEY,
    baseId: AIRTABLE_STREAM_GUEST_BASE_ID,
  });

  return schedule.map((guest) => {
    const {
      id,
      date,
      streamTitle,
      streamDescription,
      youtubeStreamLink,
      linkedinStreamLink,
      name,
      title,
      twitter,
      website,
      twitch,
      youtube,
      github,
    } = guest;

    return {
      params: {
        id,
      },
      props: {
        date,
        streamTitle,
        streamDescription,
        youtubeStreamLink,
        linkedinStreamLink,
        name,
        title,
        twitter,
        website,
        twitch,
        youtube,
        github,
      },
    };
  });
}

// const { id } = Astro.params as { id: string };
const {
  date,
  streamTitle,
  streamDescription,
  youtubeStreamLink,
  linkedinStreamLink,
  name,
  title,
  twitter,
  website,
  twitch,
  youtube,
  github,
} = Astro.props;

const videoId = youtubeStreamLink ? getYouTubeId(youtubeStreamLink) : null;
---

<MainLayout title={"daf"}>
  <article
    class="flex flex-col gap-4 [&_h2]:odd:text-purple-600 [&_h2]:text-pink-600 [&_a:hover]:text-pink-600 [&_a:hover]:odd:text-purple-600 [&_a:hover]:odd:decoration-purple-600"
  >
    <div class="grid gap-4">
      <div>
        <h1 class="flex gap-2 items-center mb-2">
          {streamTitle}
        </h1>
        <time datetime={date} class="italic">
          {date}
        </time>
        <div>
          {
            github === "nickytonline" ? null : (
              <div>
                Guest: {name}
                {title ? `, ${title}` : null}
              </div>
            )
          }
        </div>
      </div>
      {
        videoId ? (
          <img
            src={`https://img.youtube.com/vi/${videoId}/maxresdefault.jpg`}
            alt=""
            class="my-2 rounded-md w-[270px] md:w-[540px] aspect-video border border-pink-300"
          />
        ) : null
      }
      {streamDescription ? <p set:html={streamDescription} /> : null}
    </div>
    <nav class="nav" aria-label="Links for live stream guest ${name}">
      <ul class="flex gap-2 items-center">
        {
          website ? (
            <li>
              <WebsiteLink name={name} url={website} />
            </li>
          ) : null
        }
        {
          github ? (
            <li>
              <GitHubLink name={name} url={github} />
            </li>
          ) : null
        }
        {
          twitter ? (
            <li>
              <TwitterLink name={name} url={twitter} />
            </li>
          ) : null
        }

        {
          twitch ? (
            <li>
              <TwitchLink name={name} url={twitch} />
            </li>
          ) : null
        }
        {
          youtube ? (
            <li>
              <YouTubeLink name={name} url={youtube} />
            </li>
          ) : null
        }
      </ul>
    </nav>
    <p>Watch on:</p>
    <StreamLinks
      live={false}
      youtubeUrl={youtubeStreamLink}
      linkedinUrl={linkedinStreamLink}
    />
  </article>
</MainLayout>
